<div class="reveal">
	<div class="slides">
		<section>
      <h2>
        Streaming Video in Elixir
      </h2>
    </section>
    <section data-markdown>
      <textarea data-template>
### Who am I?
<img src="images/portrait.jpg" height="200" width="200">
- Software Engineer at Twitch
- Member of the Ruby diaspora
- Video Nerd
- twitter: https://twitter.com/johnawahba
- github: https://github.com/johnwahba
        </textarea>
    </section>
    <section data-markdown>
      <textarea data-template>
### Outline
- FFMPEG
- Elixir and Shell
- Building a Transcoding Pipeline
- Streaming Video
        </textarea>
    </section>

	<section>
	  <section data-markdown>
	    <textarea data-template>
### FFMPEG
A complete, cross-platform solution to record, convert and stream audio and video.

    (Source: https://ffmpeg.org/)
    - License depends on your compile flags
	    </textarea>
	  </section>
	  <section>
	    <h3>FFMPEG is amazing</h3>
	  	<pre><code data-trim data-noescape>
	      ffmpeg -i any_video.mov another_video.mp4
	  	</code></pre>
	  </section>
	  <section>
	    <h3>FFMPEG is very amazing</h3>
	  	<pre><code data-trim data-noescape>
	      ffmpeg -i any_video.mov -f ts - | ffplay -
	  	</code></pre>
	  </section>
	  <section data-markdown>
	  <textarea data-template>
### How to make an interactive stream over a video
- Transcode video to adjust keyframes
- Chunk video to every second
- Apply filters to video
- Stream video to your favorite service provider
	    </textarea>
	  </section>
	  <section>
	    <h3>Transcoding</h3>
	    <pre><code data-trim data-noescape>
	    ffmpeg
	      -i big_buck_bunny_1080p_h264.mp4
	      -vcodec libx264
	      <mark>-x264opts "keyint=30:min-keyint=30:scenecut=-1"</mark>
	      -acodec copy
	      transcoded_bunny.mp4
	  </code></pre>
	  </section>
	  <section>
	    <h3>Chunk video</h3>
	    <pre><code data-trim data-noescape>
	    ffmpeg
	      -i transcoded_bunny.mp4
	      -c copy
	      -map 0
	      -f segment
	      -segment_time 1
	      -vcodec copy
	      media/bunny%03d.ts
	  </code></pre>
	  </section>
	  <section>
	    <h3>How to stream</h3>
	    <pre><code data-trim data-noescape>
	    ffmpeg
	      -i -
	      -f flv "rtmp://rtmp_server_address.domain/stream_key"
	  </code></pre>
	  </section>
	</section>


	<section>
		<section data-markdown>
			<textarea data-template>
### Elixir and Shell
<pre><code data-trim data-noescape>:os.cmd('echo hello')</code></pre>
<pre><code data-trim data-noescape>:erlang.ports()</code></pre>
<pre><code data-trim data-noescape>Porcelain.shell()</code></pre>
			</textarea>
		</section>
		<section data-markdown>
			<textarea data-template>
### :os.cmd()
- Pros:
	- Works (TM)
- Cons:
	- STDOUT only
	- String output
	- No Streaming support
			</textarea>
		</section>
		<section data-markdown>
			<textarea data-template>
### :erlang.ports()
- Pros:
	- Process.send() interface plays well with OTP
	- Supports stderr output (critical for ffmpeg logs)
- Cons:
	- Does not send os signals to external processes
			</textarea>
		</section>
		<section data-markdown>
			<textarea data-template>
### Porcelain.shell()
- Pros:
	- Built on top of ports
	- Flexible output formats
		- Stream
		- String
		- Append to File
- Cons:
	- Requires go dependency for some of the features
	- Some instability when reading from both stderr and stdout at the same time.
			</textarea>
		</section>
		<section >
			<h3>Porcelain options</h3>
			<table>
				<tr>
					<td></td>
					<td>sync</td>
					<td>async</td>
				</tr>
				<tr>
					<td>string</td>
					<td>Porcelain.shell()</td>
					<td>Porcelain.spawn_shell()</td>
				</tr>
				<tr>
					<td>cmd+args</td>
					<td>Porcelain.exec()</td>
					<td>Porcelain.spawn()</td>
				</tr>
			</table>
		</section>
	</section>

  <section>
    <section>
      <h3>Transcoding Video in Elixir</h3>
    </section>
    <section data-markdown>
	  <textarea data-template>
### Transcoding video
- Transcode step helps reduce work done at stream time
- Producer -> ConsumerSupervisor -> Transcoder

- GenStage makes the code super clean
	    </textarea>
	  </section>
    <section>
      <h3>Vdemo2017.TranscoderProducer</h3>
      <pre class="stretch"><code data-trim data-noescape>
        defmodule Vdemo2017.TranscoderProducer do
          use GenStage
          defstruct [buffered_demand: 1, dir: nil, timer: nil]
          @heart_beat_timeout 10

          def start_link(dir \\ "jobs/**/*") do
            GenStage.start_link(
              __MODULE__,
              %__MODULE__{dir: dir},
              name: __MODULE__
            )
          end

          def init(state) do
            timer = :timer.send_interval(1000, self(), :check_demand)
            {:producer, %{state | timer: timer}}
          end
          # ...
      </code></pre>
    </section>
    <section>
      <pre class="stretch"><code data-trim data-noescape>
          # ...
          def handle_info(:check_demand, state) do
            handle_demand(0, state)
          end

          def handle_demand(demand, %__MODULE__{
              dir: dir,
              buffered_demand: buffered_demand
            } = transcoder) when demand + buffered_demand > 0 do
            total_demand = demand + buffered_demand
            {:ok, {jobs, count}} = get_jobs(dir, total_demand)
            {:noreply, jobs,
              %{transcoder | buffered_demand: total_demand - count}}
          end

          def handle_demand(_demand, transcoder) do
            {:noreply, [], transcoder}
          end
          # ...
      </code></pre>
    </section>
    <section>
      <pre class="stretch"><code data-trim data-noescape>
          # ...
          defp get_jobs(dir, demand) do
            dir
            |> Path.wildcard
            |> Enum.reject(&is_meta_file?/1)
            |> Enum.reject(&locked?/1)
            |> Enum.reject(&done?/1)
            |> Enum.take(demand)
            |> Enum.map(&take_lock/1)
            |> case do
              files -> {:ok, {files, length(files)}}
            end
          end
        end
      </code></pre>
    </section>
    <section>
      <h3>Vdemo2017.TranscoderConsumer</h3>
      <pre class="stretch"><code data-trim data-noescape>
        defmodule Vdemo2017.TranscoderConsumer do
          use ConsumerSupervisor

          def start_link() do
            ConsumerSupervisor.start_link(__MODULE__, :ok)
          end

          def init(:ok) do
            children = [worker(Vdemo2017.Transcoder, [], restart: :temporary)]
            {:ok,
              children,
              strategy: :one_for_one,
              subscribe_to: [{Vdemo2017.TranscoderProducer, max_demand: 2}]}
          end
        end
      </code></pre>
    </section>
    <section>
      <h3>Vdemo2017.Transcoder</h3>
      <pre class="stretch"><code data-trim data-noescape>
        defmodule Vdemo2017.Transcoder do
          use Task
          @heartbeat 5_000

          def start_link({file, lock}) do
            Task.start_link(fn ->
              keep_lock_while_alive(self(), lock, @heartbeat)
              file
              |> transcode()
              |> chunk()
              done({file, lock})
            end)
          end

          def keep_lock_while_alive(pid, lock, heartbeat) do
            if Process.alive?(pid) do
              :ok = File.touch!(lock)
              :timer.apply_after(heartbeat, __MODULE__, :keep_lock_while_alive, [pid, lock, heartbeat])
            end
          end
      </code></pre>
    </section>
    <section>
      <pre class="stretch"><code data-trim data-noescape>
        def transcode(file) do
          transcode_path = transcode_path(file)
          :filelib.ensure_dir(transcode_path)
          %{status: 0} = Porcelain.exec("ffmpeg", [
            "-i", file,
            "-vcodec", "libx264",
            "-x264opts", "keyint=30:min-keyint=30:scenecut=-1",
            "-acodec", "copy", transcode_path], err: :out)
          transcode_path
        end

        def chunk(file) do
          chunk_path = chunk_path(file)
          :filelib.ensure_dir(chunk_path)
          %{status: 0} = Porcelain.exec("ffmpeg", [
            "-i", file,
            "-c", "copy",
            "-map", "0",
            "-f", "segment",
            "-segment_time", "1",
            "-vcodec", "copy", chunk_path])
          chunk_path
        end
      </code></pre>
    </section>
  </section>

  <section>
    <section data-markdown>
      <textarea data-template>
### Streaming video
- Streaming
- Applying filters
- Making it parallel
      </textarea>
    </section>
      <section>
        <pre class="stretch"><code data-trim data-noescape>
          def blocking_start_stream(dir) do
            dir
            |> Stream.map(&read_bytes/1)
            <mark>|> Stream.flat_map(&apply_filter/1)</mark>
            |> play
          end

          def read_bytes(file), do: file |> File.read!() |> List.wrap()

          def apply_filter(bytes) do
            opts = [in: bytes, out: :stream]
            %{"yay" => yays, "nay" => nays} = Vdemo2017.Voter.get_results()
            %{out: out} = Porcelain.spawn("ffmpeg", [
            "-i", "-",
            "-f", "mpegts",
            "-vf", "drawtext='fontfile=/Library/Fonts/Arial\ Bold.ttf: \
            text=\'yays-#{yays} nays-#{nays} t-#{:os.system_time(:seconds)}\': \
            fontcolor=white: fontsize=72: box=1: boxcolor=black@0.5: \
            boxborderw=5: x=(w-text_w)/2: y=(h-text_h)'",
            "-"], opts)
            out
          end
        </code></pre>
      </section>
    <section>
      <section>
        <h3>How to use filters</h3>
        <pre><code data-trim data-noescape>
          def start_stream(dir) do
            dir
            |> Stream.map(&read_bytes/1)
            |> Task.async_stream(&apply_filter/1,
              concurrency: 2, ordered: true, timeout: 5_000_000)
            |> Stream.flat_map(fn({:ok, bytes}) -> bytes end)
            |> play
          end

          def play(bytes) do
            opts = [in: bytes]
            Porcelain.spawn_shell(
              "ffmpeg -i - -acodec copy -f mpegts -b 12000k - | ffplay -",
              opts)
          end
        </code></pre>
        <iframe width="0" height="0" border="0" name="dummyframe" id="dummyframe"></iframe>
        <form action="/start_stream" method="post" target="dummyframe">
          <input type="submit" value="Start Stream!">
        </form>
        <form action="/vote/yay" method="post" target="dummyframe">
          <input type="submit" value="Vote Yay!">
        </form>
        <form action="/vote/nay" method="post" target="dummyframe">
          <input type="submit" value="Vote Nay!">
        </form>
      </section>
    </section>
  </section>

  <section data-markdown>
    <textarea data-template>
      ### Wishlist
      - Porcelain supporting high volume writes to stdout and stderr
      - Genstage supporting ordered output
      - Transcoding video without turning my computer into a jet engine
      - Better Docker support for GPUs
    </textarea>
  </section>

  <section>
    <h3>Thanks</h3>
    Project: <a href="https://github.com/johnwahba/vdemo2017">https://github.com/johnwahba/vdemo2017</a>
  </section>
	</div>
</div>
